devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
?lm
knitr::opts_chunk$set(echo = TRUE)
#### function ###
my_rf_cv <- function(k) {
dat <- penguins %>%
select(body_mass_g, bill_length_mm,
bill_depth_mm, flipper_length_mm)
dat <- na.omit(dat)
# split data
dat$split <- sample(rep(1:k, length = nrow(dat)))
# initialize prediction matrix
predict_mat <- rep(NA, nrow(dat))
mse <- matrix(NA, k, 1)
# iterate through k-folds
for (i in 1:k){
data_train <- dat %>% filter(split != i)
data_test <- dat %>% filter(split == i)
result <- randomForest(body_mass_g ~ bill_length_mm +
bill_depth_mm + flipper_length_mm,
data = data_train,
ntree = 100)
mse[i, 1] <- mean((predict(result, test[, -1]) - data_test$body_mass_g)^2)
}
# return CV error
return(list("MSE" = mean(mse)))
}
# test
my_rf_cv(k = 5)
library(palmerpenguins)
library(tidyverse)
library(class)
library(randomForest)
# data(package = "palmerpenguins")
data("penguins")
# test
my_rf_cv(k = 5)
#### function ###
my_rf_cv <- function(k) {
dat <- penguins %>%
select(body_mass_g, bill_length_mm,
bill_depth_mm, flipper_length_mm)
dat <- na.omit(dat)
# split data
dat$split <- sample(rep(1:k, length = nrow(dat)))
# initialize prediction matrix
predict_mat <- rep(NA, nrow(dat))
mse <- matrix(NA, k, 1)
# iterate through k-folds
for (i in 1:k){
data_train <- dat %>% filter(split != i)
data_test <- dat %>% filter(split == i)
result <- randomForest(body_mass_g ~ bill_length_mm +
bill_depth_mm + flipper_length_mm,
data = data_train,
ntree = 100)
mse[i, 1] <- mean((predict(result, data_test[, -1]) - data_test$body_mass_g)^2)
}
# return CV error
return(list("MSE" = mean(mse)))
}
# test
my_rf_cv(k = 5)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(STAT302proj3)
?my_rf_cv
devtools::check()
do.call()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install_github("wang-leqi/STAT302proj3")
devtools::install_github("leqiw/STAT302proj3")
usethis::use_readme_md()
usethis::use_github_action_check_standard()
usethis::use_testthat()
usethis::use_test("my_knn_cv")
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_github_action("test-coverage")
library(palmerpenguins)
data(penguins)
my_penguins <- penguins
usethis::use_data(my_penguins)
force(penguins_raw)
usethis::use_vignette("tutorial", title = "Project 3: PACKAGE_NAME Tutorial")
library(STAT302proj3)
devtools::install_github("wang-leqi/STAT302proj3", build_vignette = TRUE, build_opts = c())
library(STAT302proj3)
devtools::install_github("wang-leqi/STAT302proj3", build_vignette = TRUE, build_opts = c())
library(STAT302proj3)
devtools::install_github("wang-leqi/STAT302proj3", build_vignette = TRUE, build_opts = c())
library(STAT302proj3)
library(STAT302proj3)
devtools::check()
devtools::document
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
usethis::use_github_action("test-coverage")
usethis::use_data(my_gapminder)
library(gapminder)
data("gapminder")
my_gapminder <- gapminder
usethis::use_data(my_gapminder)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
t
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
test_that("my_knn_cv returns a numeric Estimate", {
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 1, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 2, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 3, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 4, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 5, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 6, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 7, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 8, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 9, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 10, k_cv = 5 ),"list")
})
library(tidyverse)
library(class)
my_penguins <- drop_na(my_penguins)
test_that("my_knn_cv returns a numeric Estimate", {
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 1, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 2, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 3, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 4, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 5, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 6, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 7, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 8, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 9, k_cv = 5 ),"list")
expect_is(my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = 10, k_cv = 5 ),"list")
})
devtools::document()
devtools::check()
library("randomForest")
library("tidyverse")
library(tidyverse)
library(randomForest)
# within test-my_rf_cv.R
test_that("non_numeric k throws error", {
expect_error(my_rf_cv("5"))
})
test_that("my_t.test works mathematically", {
expect_type(my_rf_cv(5), "double")
})
library("randomForest")
library("tidyverse")
test_that("my_rf_cv returns a numeric Estimate", {
expect_is(my_rf_cv(k = 5),"numeric")
})
test_that("non_numeric k throws error", {
expect_error(my_rf_cv("5"))
})
test_that("my_rf_cv returns a numeric Estimate", {
expect_is(my_rf_cv(k = 5),"numeric")
})
test_that("my_t.test works mathematically", {
expect_type(my_rf_cv(5), "double")
})
my_rf_cv(5)
test_that("my_t.test works mathematically", {
expect_type(my_rf_cv(5), "double")
})
test_that("my_t.test works mathematically", {
expect_type(my_rf_cv(5), "double")
})
devtools::document()
test_that("my_t.test works mathematically", {
expect_type(my_rf_cv(5), "double")
})
devtools::document()
devtools::check()
devtools::test()
